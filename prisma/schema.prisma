// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  superadmin
  admin
  agent
  customer
}

model User {
  id               Int      @id @default(autoincrement())
  name             String
  email            String   @unique
  password         String
  joined_at        DateTime @default(now())
  customer_tickets Ticket[] @relation("customer_tickets")
  agent_tickets    Ticket[] @relation("agent_tickets")
  team             Team?    @relation(fields: [teamId], references: [id])
  teamId           Int?
  role             Roles
}

enum TicketState {
  WAITING
  PENDING
  COMPLETED
  RESOLVED
  CANCELED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum Rating {
  POOR
  AVERAGE
  GOOD
  EXCELLENT
}

model Ticket {
  id         Int            @id @default(autoincrement())
  question   String
  priority   TicketPriority @default(LOW)
  state      TicketState    @default(WAITING)
  agent      User?          @relation("agent_tickets", fields: [agentId], references: [id])
  customer   User           @relation("customer_tickets", fields: [customerId], references: [id])
  agentId    Int?
  customerId Int
  answer     Answer[]
  rating     Rating?
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
}

model Answer {
  id         Int      @id @default(autoincrement())
  ticket     Ticket   @relation(references: [id], fields: [ticketId], onDelete: Cascade)
  ticketId   Int
  answer     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Field {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  Team       Team[]
}

model Team {
  id      Int    @id @default(autoincrement())
  name    String
  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId Int
  Agent   User[]
}
